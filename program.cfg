set once mcp5675.once

set C90_WORD_SIZE               4
set C90_DWORD_SIZE              8
set C90_PAGE_SIZE               8

# Indicators for setting/getting block lock state

set LOCK_LOW_PRIMARY             4
set LOCK_LOW_SECONDARY           5
set LOCK_MID_PRIMARY             6
set LOCK_MID_SECONDARY           7
set LOCK_HIGH                    8

set NULL_CALLBACK             0xFFFFFFFF

set FLASH_LMLR_PASSWORD       0xA1A11111
set FLASH_HLR_PASSWORD        0xB2B22222
set FLASH_SLMLR_PASSWORD      0xC3C33333

# Set addresses of each function
set Addr_FlashInit            0x40000000
set Addr_FlashErase           0x40000400
set Addr_BlankCheck           0x40000A00
set Addr_FlashProgram         0x40000D00
set Addr_ProgramVerify        0x40001B00
set Addr_CheckSum             0x40001E00
set Addr_GetLock              0x40002100
set Addr_SetLock              0x40002600

# stack top address, this address should aligned on 8-byte boundary
set Addr_StackTop             0x400080F0

#######################################################################
# variables used in demo
#######################################################################

# SSD_CONFIG structure and fields
set pSSDConfig                0x40004000
set c90RegBase                0x40004000
set mainArrayBase             0x40004004
set mainArraySize             0x40004008
set shadowRowBase             0x4000400C
set shadowRowSize             0x40004010
set lowBlockNum               0x40004014
set midBlockNum               0x40004018
set highBlockNum              0x4000401C
set pageSize                  0x40004020
set BDMEnable                 0x40004024
       
# pointers used in SSD           0x40004028 
set CallBack                  0x4000402C
set failAddress               0x40004030
set failData                  0x40004034
set failSource                0x40004038
set sum                       0x4000403C
set blkLockEnabled            0x40004040
set blkLockState              0x40004044

# dest, size and source
set dest                      0x00000000
set size                      0x00004000
set program_size              0x00000100
set source_start              0x40005000
set source_end                0x40005800


# enabled blocks for low/mid/high spaces
set lowEnabledBlocks          0x1
set midEnabledBlocks          0x0
set highEnabledBlocks         0x0
set shadowFlag                0x0

# symbol SSD_CONFIG fields
once_write32 $once    $c90RegBase           0xC3F88000
once_write32 $once    $mainArrayBase        0x00000000
once_write32 $once    $mainArraySize        0x0
once_write32 $once    $shadowRowBase        0x00200000
once_write32 $once    $shadowRowSize        0x00004000
once_write32 $once    $lowBlockNum          0x0
once_write32 $once    $midBlockNum          0x0
once_write32 $once    $highBlockNum         0x0
once_write32 $once    $pageSize             0x90_PAGE_SIZE
once_write32 $once    $BDMEnable            0xFFFFFFFF

# Initialize sum, failAddress, failData, failSource to 0s
once_write32 $once    $CallBack             $NULL_CALLBACK
once_write32 $once    $failAddress          0   
once_write32 $once    $failData             0
once_write32 $once    $failSource           0
once_write32 $once    $sum                  0
once_write32 $once    $blkLockEnabled       0
once_write32 $once    $blkLockState         0

# the block in high space used in demo
set mainArrayBaseValue     $mainArrayBase
set blockAddress           0x00000000
set blockSize              0x00004000

# in Standard Software C90LC Driver v1.0.4/xPC567xK_C90LC/driver/vle/s-record_driver
# run following to get the files:
# for file in `ls *.sx`; do objcopy --input-target=srec --output-target=binary $file $file.bin; done

#once_load_bin $once $Addr_FlashInit FlashInit.bin
#once_load_bin $once $Addr_SetLock SetLock.bin
#once_load_bin $once $Addr_FlashErase FlashErase.bin

once_write32 $once 0xFFF38010 0x0000C520
once_write32 $once 0xFFF38010 0x0000D928
once_write32 $once 0xFFF38000 0xFF00000A

# se_dnh
once_write32 $once 0x40000170 0x000f000f

#once_write32 $once 0x4000015c 0x00000000

#write return address to link register
once_write_spr $once 8 0x40000170

proc unlock {once} {

	once_write32 $once 0xC3F88004 0xA1A11111
	once_write32 $once 0xC3F88004 0x00100000
	once_write32 $once 0xC3F8800C 0xC3C33333
	once_write32 $once 0xC3F8800C 0x00100000

}

proc erase {once} {

	unlock $once

	once_write32 $once 0xC3F88000 0x00000004
	# select block here:
	once_write32 $once 0xC3F88010 0x00000001
	once_write32 $once 0x0 0x00000001
	once_write32 $once 0xC3F88000 0x00000005
	once_write32 $once 0xC3F88000 0x00000004
	once_write32 $once 0xC3F88000 0x00000000

}

proc sure_write {once addr data} {
	
	write $once $addr $data

	while {[once_read32 $once $addr] != $data} {
		echo "retry $addr"
		write $once $addr $data
	}	
}

proc write {once addr data} {

	once_write32 $once 0xC3F88000 0x00000010
	once_write32 $once $addr $data
	once_write32 $once 0xC3F88000 0x00000011

        for {set i 0} {$i < 12} {set i [expr $i + 1]} {
		once_nexus_read  $once 0xC3F88000
	}

	once_write32 $once 0xC3F88000 0x00000010
	once_write32 $once 0xC3F88000 0x00000000
}

proc write_nexus {once addr data} {
	#use nexus

	once_nexus_write $once 0xC3F88000 0x00000010
	#once_write32 $once $addr $data
	once_nexus_write $once 0xC3F88000 0x00000011

	#once_write32 $once $addr $data
	once_read32  $once 0xC3F88000
	#sleep 1

	once_nexus_write $once 0xC3F88000 0x00000010
	once_nexus_write $once 0xC3F88000 0x00000000
}

proc write_file {once addr filename} {

	once_write32 $once 0xC3F88000 0x00000010
	once_load_bin $once $addr $filename
	once_write32 $once 0xC3F88000 0x00000011

	once_read32  $once 0xC3F88000
	#sleep 10

	once_write32 $once 0xC3F88000 0x00000010
	once_write32 $once 0xC3F88000 0x00000000
}


if { 0 } {

once_write_gpr $once 3 $pSSDConfig
once_write_gpr $once 1 $Addr_StackTop
once_run $once $Addr_FlashInit

once_step $once
once_step $once
once_step $once
once_continue $once

sleep 100

once_read_gpr $once 3

set cpucsr [once_read_cpuscr $once]
echo "cpucsr $cpucsr"

set lock [once_read32 $once 0xc3f88004]
echo "lock: $lock"

#
#
once_write_gpr $once 3 $pSSDConfig
once_write_gpr $once 4 $LOCK_LOW_SECONDARY
#once_write_gpr $once 4 $LOCK_LOW_PRIMARY
once_write_gpr $once 5 0
once_write_gpr $once 6 $FLASH_SLMLR_PASSWORD
#once_write_gpr $once 6 $FLASH_LMLR_PASSWORD
once_write_gpr $once 1 $Addr_StackTop
once_run $once $Addr_SetLock

once_step $once
once_continue $once

sleep 1000

set cpucsr [once_read_cpuscr $once]
echo "cpucsr $cpucsr"

set lock [once_read32 $once 0xc3f88004]
echo "lock: $lock"

once_read_gpr $once 3

once_write_gpr $once 3 $pSSDConfig
once_write_gpr $once 4 $shadowFlag
once_write_gpr $once 5 $lowEnabledBlocks
once_write_gpr $once 6 $midEnabledBlocks
once_write_gpr $once 7 $highEnabledBlocks
once_write_gpr $once 8 $NULL_CALLBACK
once_write_gpr $once 1 $Addr_StackTop
once_run $once $Addr_FlashErase

once_read_gpr $once 3

}
