set once mcp5675.once

set C90_WORD_SIZE               4
set C90_DWORD_SIZE              8
set C90_PAGE_SIZE               8

# Indicators for setting/getting block lock state

set LOCK_LOW_PRIMARY             4
set LOCK_LOW_SECONDARY           5
set LOCK_MID_PRIMARY             6
set LOCK_MID_SECONDARY           7
set LOCK_HIGH                    8

set NULL_CALLBACK             0xFFFFFFFF

set FLASH_LMLR_PASSWORD       0xA1A11111
set FLASH_HLR_PASSWORD        0xB2B22222
set FLASH_SLMLR_PASSWORD      0xC3C33333

# Set addresses of each function
set Addr_FlashInit            0x40000000
set Addr_FlashErase           0x40000400
set Addr_BlankCheck           0x40000A00
set Addr_FlashProgram         0x40000D00
set Addr_ProgramVerify        0x40001B00
set Addr_CheckSum             0x40001E00
set Addr_GetLock              0x40002100
set Addr_SetLock              0x40002600

# stack top address, this address should aligned on 8-byte boundary
set Addr_StackTop             0x400080F0

#######################################################################
# variables used in demo
#######################################################################

# SSD_CONFIG structure and fields
set pSSDConfig                0x40004000
set c90RegBase                0x40004000
set mainArrayBase             0x40004004
set mainArraySize             0x40004008
set shadowRowBase             0x4000400C
set shadowRowSize             0x40004010
set lowBlockNum               0x40004014
set midBlockNum               0x40004018
set highBlockNum              0x4000401C
set pageSize                  0x40004020
set BDMEnable                 0x40004024
       
# pointers used in SSD           0x40004028 
set CallBack                  0x4000402C
set failAddress               0x40004030
set failData                  0x40004034
set failSource                0x40004038
set sum                       0x4000403C
set blkLockEnabled            0x40004040
set blkLockState              0x40004044

# dest, size and source
set dest                      0x00000000
set size                      0x00004000
set program_size              0x00000100
set source_start              0x40005000
set source_end                0x40005800


# enabled blocks for low/mid/high spaces
set lowEnabledBlocks          0x1
set midEnabledBlocks          0x0
set highEnabledBlocks         0x0
set shadowFlag                0x0

# symbol SSD_CONFIG fields
once_write32 $once    $c90RegBase           0xC3F88000
once_write32 $once    $mainArrayBase        0x00000000
once_write32 $once    $mainArraySize        0x0
once_write32 $once    $shadowRowBase        0x00200000
once_write32 $once    $shadowRowSize        0x00004000
once_write32 $once    $lowBlockNum          0x0
once_write32 $once    $midBlockNum          0x0
once_write32 $once    $highBlockNum         0x0
once_write32 $once    $pageSize             0x90_PAGE_SIZE
once_write32 $once    $BDMEnable            0xFFFFFFFF

# Initialize sum, failAddress, failData, failSource to 0s
once_write32 $once    $CallBack             $NULL_CALLBACK
once_write32 $once    $failAddress          0   
once_write32 $once    $failData             0
once_write32 $once    $failSource           0
once_write32 $once    $sum                  0
once_write32 $once    $blkLockEnabled       0
once_write32 $once    $blkLockState         0

# the block in high space used in demo
set mainArrayBaseValue     $mainArrayBase
set blockAddress           0x00000000
set blockSize              0x00004000

# in Standard Software C90LC Driver v1.0.4/xPC567xK_C90LC/driver/vle/s-record_driver
# run following to get the files:
# for file in `ls *.sx`; do objcopy --input-target=srec --output-target=binary $file $file.bin; done

once_load_bin $once once_write32 $Addr_FlashInit FlashInit.bin
once_load_bin $once once_write32 $Addr_SetLock SetLock.bin
once_load_bin $once once_write32 $Addr_FlashErase FlashErase.bin

# disable watchdog
once_write32 $once 0xFFF38010 0x0000C520
once_write32 $once 0xFFF38010 0x0000D928
once_write32 $once 0xFFF38000 0xFF00000A

# If none of the flash memory sectors contains a valid boot signature, the microcontroller goes into Safe mode.

# Mode Enable Register (ME_ME) ? enable modes p1310
#
set meme [once_read32 $once 0xC3FDC008]
echo "meme $meme"

# 35.4.2.3 SAFE mode p1328
#

# RGM_FES p1579
#
set rgmfes [once_read32 $once 0xC3FE4000]
echo "rgmfes $rgmfes"
once_write32 $once 0xC3FE4000 0xffffffff


# 35.3.2.4 Interrupt Status Register (ME_IS)
# clear safe mode interrup
#once_write32 $once 0xC3FDC00C 0x0000001f

# 35.3.2.6 Invalid Mode Transition Status Register (ME_IMTS)
# claer safe event active
#once_write32 $once 0xC3FDC014 0x0000001f

# 35.1.3 Modes of operation p1296
# Figure 35-23. MC_ME mode diagram p1327
#
# 35.3.2.11 DRUN Mode Configuration Register (ME_DRUN_MC) p1318
set drunmc [once_read32 $once 0xC3FDC02C]
echo "drunmc $drunmc"
once_write32 $once 0xC3FDC02C 0x009F0074
set drunmc [once_read32 $once 0xC3FDC02C]
echo "drunmc $drunmc"

# 35.3.2.2 Mode Control Register (ME_MCTL)  p1307
# enter drun
once_write32 $once 0xC3FDC004 0x30005AF0
once_write32 $once 0xC3FDC004 0x3000A50F
sleep 1

# 35.3.2.1 Global Status Register (ME_GS) p1305
# ME_GS get current mode first 4 bits
set megs [once_read32 $once 0xC3FDC000]
echo "megs $megs"

# 35.3.2.7 Debug Mode Transition Status Register (ME_DMTS) p1313
set dmsr [once_read32 $once 0xC3FDC018]
echo "dmsr $dmsr"

set rgmfes [once_read32 $once 0xC3FE4000]
echo "rgmfes $rgmfes"

# enable clkout
once_write32 $once 0xC3FE0370 0x00000001
set clkout [once_read32 $once 0xC3FE0370]
echo "clkout $clkout"

# set B3 pin cgm clk out
once_write32 $once 0xC3F9006C 0x46000000
set pcr [once_read32 $once 0xC3F9006c]
echo "pcr $pcr"

# Crystal Oscillator Control Register (OSC_CTL) p1463
# bypass
once_write32 $once 0xC3FE0000 0x80000000
# neviem
#once_write32 $once 0xC3FE0000 0x00800000
set xosc [once_read32 $once 0xC3FE0000]
echo "xosc $xosc"

# Output Clock Division Select Register (CGM_OCDS_SC)
# 0010 FMPLL0_CLK, 0 rcosc, 01 4-40 MHz crystal osc.
once_write32 $once 0xC3FE0374 0x12000000
set ocds [once_read32 $once 0xC3FE0374]
echo "ocds $ocds"

# SAFE Mode Configuration Register (ME_SAFE_MC)
#once_write32 $once 0xC3FE0374 0x01000000
set safemc [once_read32 $once 0xC3FDC028]
echo "safemc $safemc"
#once_write32 $once 0xC3FDC028 0x009F0070
#once_write32 $once 0xC3FDC02C 0x009F0070
#once_write32 $once 0xC3FDC040 0x009F0070
#once_write32 $once 0xC3FDC048 0x009F0070


# Auxiliary Clock 3 Select Control Register (CGM_AC3_SC)
# FMPLL0 source select
# 0 - rcclk
once_write32 $once 0xC3FE0398 0x00000000
set aux3sel [once_read32 $once 0xC3FE0398]
echo "aux3sel $aux3sel"

# FMPLL config
#once_write32 $once 0xC3FE00A4 0x00008000
set pllmr [once_read32 $once 0xC3FE00A4]
echo "pllmr $pllmr"

# FMPLL_CR p 1124
#once_write32 $once 0xC3FE00A0 0x05400001
set pllcr [once_read32 $once 0xC3FE00A0]
echo "pllcr $pllcr"

# se_dnh
once_write32 $once 0x40000170 0x000f000f
# illegal
once_write32 $once 0x40000170 0x00000000

# ME_GS get current mode first 4 bits
set megs [once_read32 $once 0xC3FDC000]
echo "megs $megs"


#once_write32 $once 0x4000015c 0x00000000

#write return address to link register
once_write_spr $once 8 0x40000170

proc unlock {once} {

	once_write32 $once 0xC3F88004 0xA1A11111
	once_write32 $once 0xC3F88004 0x00100000
	once_write32 $once 0xC3F8800C 0xC3C33333
	once_write32 $once 0xC3F8800C 0x00100000

	once_write32 $once 0xC3FB0004 0xA1A11111
	once_write32 $once 0xC3FB0004 0x00100000
	once_write32 $once 0xC3FB000C 0xC3C33333
	once_write32 $once 0xC3FB000C 0x00100000

}

proc erase {once} {

	#unlock $once

	set stat [once_read32 $once 0xC3F88000]
	echo "stat $stat"

	once_write32 $once 0xC3F88000 [expr {($stat & 0xffff3fff) | 0x4} ]

	# select block here

	# 0 - 0x4000 
	#once_write32 $once 0xC3F88010 0x00000001
	#once_write32 $once 0x0 0x00000001

	# 0x30000 - 0x40000
	once_write32 $once 0xC3F88010 0x00000080
	once_write32 $once 0x30000 0x00000001	

	# 0xc0000 - 0x100000
	#once_write32 $once 0xC3F88010 0x00030000
	#once_write32 $once 0xc0000 0x00000001



	set stat [once_read32 $once 0xC3F88000]
	echo "stat $stat"

	once_write32 $once 0xC3F88000 [expr {($stat & 0xffff3fff) | 0x1} ]

	set stat [once_read32 $once 0xC3F88000]
	echo "wait stat $stat"

	sleep 3000

	#while { ([once_read32 $once 0xC3F88000] & 0x400) == 0 } {}

	set stat [once_read32 $once 0xC3F88000]
	echo "stat $stat"

	once_write32 $once 0xC3F88000 [expr {($stat & 0xffff3ffE)} ]

	once_write32 $once 0xC3F88000 [expr {($stat & 0xffff3ffB)} ]

}

proc erase2 {once} {

	unlock $once

	once_write32 $once 0xC3FB0000 0x00000004
	# select block here:
	once_write32 $once 0xC3FB0010 0x00000001
	once_write32 $once 0x40000 0x00000001
	once_write32 $once 0xC3FB0000 0x00000005
	while { [expr [once_read32 $once 0xC3FB0000] & 0x400] == 0 } {
		#echo "sleeping"
		sleep 1
	}
	once_write32 $once 0xC3FB0000 0x00000004
	once_write32 $once 0xC3FB0000 0x00000000

}


proc write_start {once} {
	set stat [once_read32 $once 0xC3F88000]
	once_write32 $once 0xC3F88000 [expr {($stat & 0xffff3fff) | 0x10} ]
}

proc write_end {once} {
	set stat [once_read32 $once 0xC3F88000]
	once_write32 $once 0xC3F88000 [expr {($stat & 0xffff3fff) | 0x1} ]

	#sleep 100

	once_write32 $once 0xC3F88000 [expr {($stat & 0xffff3ffE)} ]

	once_write32 $once 0xC3F88000 [expr {($stat & 0xffff3fEf)} ]

	#sleep 100
}

proc write2 {once addr data} {

	echo "write $once $addr $data"
	set data [format 0x%08X $data]

	#sleep 1
	#set data [hex_rev [string range $data 2 end] ]
	#set data "0x$data"
	#once_nexus_write $once $addr $data
	once_write32 $once $addr $data
	#sleep 1
	#once_write32 $once 0xC3F88000 0x8000C011
	#once_nexus_write $once 0xC3F88000 [hex_rev 8000C011]

        for {set i 0} {$i < 12} {set i [expr $i + 1]} {
		#once_nexus_read  $once 0xC3F88000
	}

	set stat [once_nexus_read $once 0xC3F88000]
	#echo "stat $stat"

	#while { [expr $stat & 0x400] == 0 } {
	#	echo "sleeping"
#		sleep 1
#	}

	once_write32 $once 0xC3F88000 0x8000C010

	set rb [once_nexus_read $once $addr]
	set rb [string toupper $rb]
	set rb "0x$rb"
	if { $rb != $data } {
		echo "not match $data $rb"
	}
}

proc write {once addr data} {

	if { ($addr % 0x8) == 0 } { write_start $once }

	set fn once_write32
	set data [format 0x%08X $data]

	echo "$fn $once $addr $data"

	$fn $once $addr $data

	#sleep 100

	#set rb [once_read32 $once $addr]

	#echo "rb $rb"

	if { ($addr % 0x8) != 0 } { write_end $once }

}

proc write_nexus {once addr data} {
	#use nexus

	once_nexus_write $once 0xC3F88000 0x00000010
	once_nexus_write $once $addr $data
	once_nexus_write $once 0xC3F88000 0x00000011

	#once_write32 $once $addr $data
	set stat [once_nexus_read  $once 0xC3F88000]
	echo "stat $stat"
	#sleep 1

	once_nexus_write $once 0xC3F88000 0x00000010
	once_nexus_write $once 0xC3F88000 0x00000000
}

proc write_file {once addr filename} {

	#unlock $once

	#write_start $once

    #erase $once

	once_load_bin $once write $addr $filename

	#write_end $once

}




if { 0 } {

once_write_spr $once 8 0x40000170
once_write_gpr $once 3 $pSSDConfig
once_write_gpr $once 1 $Addr_StackTop
once_run $once $Addr_FlashInit

once_step $once
once_step $once
once_step $once
once_continue $once

sleep 100

once_read_gpr $once 3

set cpucsr [once_read_cpuscr $once]
echo "cpucsr $cpucsr"

set lock [once_read32 $once 0xc3f88004]
echo "lock: $lock"

#
#
once_write_spr $once 8 0x40000170
once_write_gpr $once 3 $pSSDConfig
#once_write_gpr $once 4 $LOCK_LOW_SECONDARY
once_write_gpr $once 4 $LOCK_LOW_PRIMARY
once_write_gpr $once 5 0
#once_write_gpr $once 6 $FLASH_SLMLR_PASSWORD
once_write_gpr $once 6 $FLASH_LMLR_PASSWORD
once_write_gpr $once 1 $Addr_StackTop
once_run $once $Addr_SetLock

once_step $once
once_continue $once

sleep 1000

set cpucsr [once_read_cpuscr $once]
echo "cpucsr $cpucsr"

set lock [once_read32 $once 0xc3f88004]
echo "lock: $lock"

once_read_gpr $once 3

once_write_gpr $once 3 $pSSDConfig
once_write_gpr $once 4 $shadowFlag
once_write_gpr $once 5 $lowEnabledBlocks
once_write_gpr $once 6 $midEnabledBlocks
once_write_gpr $once 7 $highEnabledBlocks
once_write_gpr $once 8 $NULL_CALLBACK
once_write_gpr $once 1 $Addr_StackTop
once_run $once $Addr_FlashErase

once_read_gpr $once 3

}
