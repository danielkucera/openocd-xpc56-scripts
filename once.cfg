# SPDX-License-Identifier: GPL-2.0-or-later
#
# e200z0 OnCE (On Chip Emulator)
#
# Copyright (c) 2021, Hsin Chong Machinery Works Co., Ltd
# Copyright (c) 2021, Inertim Research, SL
# luis.dearquer@inertim.com
#
#
# The On-Chip Emulation is part of Nexus/JTAG specification.
# Implemented following the ST Application Note AN4035
#
# Nexus/JTAG Flash programming supports the following products:
#  SPC563Mxx
#  SPC564Axx
#  SPC56APxx
#  SPC560Dxx
#  SPC560Bxx
#  SPC564Bxx
#  SPC560Cxx
#  SPC560Pxx
#  SPC56ECxx
#  SPC56ELxx
#  RPC56ELxx
#  RPC560Bxx
#  RPC564Bxx
#  RPC56APxx
#  RPC564Axx
#


source binary.tcl


proc once_read_osr {once} {

	set osr 0x[irscan $once 0x011]
	return $osr
}


proc once_read_jtag_id {once} {

	irscan $once 0x002
	set once_id 0x[drscan $once 32 0x00000000]
	return $once_id
}


proc once_read_dbsr {once} {

	irscan $once 0x230
	set dbsr 0x[drscan $once 32 0x00000000]
	return $dbsr
}


proc once_read_cpuscr {once} {

	irscan $once 0x210
	set cpuscr [drscan $once 32 0x00000000 32 0x00000000 32 0x00000000 32 0x00000000 32 0x00000000 32 0x00000000]
	return $cpuscr
}


proc once_enter_debug_mode {once} {

	# First we need to enter debug mode, then enable external debug mode.
	# 1- Enter debug mode while holding reset
	#jtag_reset 0 1
	adapter assert srst

	echo "asserted"
	sleep 100

	irscan $once 0x07E
	drscan $once 32 0x00000000

	irscan $once 0x012
	set ocr 0x[drscan $once 32 0x00000005]

	echo "ocr set"
	set osr [once_read_osr $once]
	echo "OSR = $osr"

	adapter deassert srst
	echo "deasserted"

	sleep 100

	# TODO: We can use this read for checking (osr == 0x209)
	set osr [once_read_osr $once]
	echo "OSR = $osr"

	irscan $once 0x012
	set ocr 0x[drscan $once 32 0x00000006]

	# 2- Enable external debug mode
	# Write DBCR0 for enabling external debug
	irscan $once 0x031
	drscan $once 32 0x80000000
	#drscan $once 32 0x00000001

	#EDBCR0
	irscan $once 0x02E
	drscan $once 32 0x80000000
	#drscan $once 32 0x00000001

	# Clear all DBSR flags
	irscan $once 0x030
	drscan $once 32 0xFFFFFFFF
}


proc once_read_pc {once} {

	# Read CPUSCR register chain -> [ WBBRL WBBRH MSR PC IR CTL ]
	irscan $once 0x210
	set cpuscr [drscan $once 32 0x00000000 32 0x00000000 32 0x00000000 32 0x00000000 32 0x00000000 32 0x00000000]

	# Save PC subregister
	set pc 0x[lindex $cpuscr 3]

	return $pc
}


proc once_read_wbbr {once} {

	# Read CPUSCR register chain -> [ WBBRL WBBRH MSR PC IR CTL ]
	irscan $once 0x210
	set cpuscr [drscan $once 32 0x00000000 32 0x00000000 32 0x00000000 32 0x00000000 32 0x00000000 32 0x00000000]

	# Save WBBRL subregister
	set wbbr 0x[lindex $cpuscr 0]

	return $wbbr
}


# Single step with WBBR.
# WBBR is used to pass operand information to/from CPU
proc once_single_step_wbbr {once instruction wbbr} {

	# Read CPUSCR register chain -> [ WBBRL WBBRH MSR PC IR CTL ]
	irscan $once 0x210
	set cpuscr [drscan $once 32 0x00000000 32 0x00000000 32 0x00000000 32 0x00000000 32 0x00000000 32 0x00000000]

	# Save CTL subregister
	set ctl 0x[lindex $cpuscr 5]

	set ctl [expr $ctl & 0xFFFF0000]
	set ctl [expr $ctl | 0x00000402]    ;# FFRA=1 (Use wbbr), IRSTAT8=1 (VLE inst)
	set ctl [format 0x%08x $ctl]

	# Write CPUSCR
	irscan $once 0x010
	drscan $once 32 $wbbr 32 0x00000000 32 0x00000000 32 0x00000008 32 $instruction 32 $ctl

	# GO command
	irscan $once 0x111
	drscan $once 32 0x00000000
}


# Single step without WBBR
proc once_single_step {once instruction} {

	# Read CPUSCR register chain -> [ WBBRL WBBRH MSR PC IR CTL ]
	irscan $once 0x210
	set cpuscr [drscan $once 32 0x00000000 32 0x00000000 32 0x00000000 32 0x00000000 32 0x00000000 32 0x00000000]

	# Save CTL subregister
	set ctl 0x[lindex $cpuscr 5]

	set ctl [expr $ctl & 0xFFFF0000]
	set ctl [expr $ctl | 0x00000002]    ;# FFRA=0 (Don't use wbbr), IRSTAT8=1 (VLE inst)
	set ctl [format 0x%08x $ctl]

	# Write CPUSCR
	irscan $once 0x010
	drscan $once 32 0x00000000 32 0x00000000 32 0x00000000 32 0x00000008 32 $instruction 32 $ctl

	# GO command
	irscan $once 0x111
	drscan $once 32 0x00000000
}


proc once_read32 {once address} {

	once_single_step_wbbr $once 0x501F0000 $address

	# Read CPUSCR
	irscan $once 0x210
	set cpuscr [drscan $once 32 0x00000000 32 0x00000000 32 0x00000000 32 0x00000000 32 0x00000000 32 0x00000000]

	set value 0x[lindex $cpuscr 0]
	return $value
}

proc once_write32 {once address value} {

	# Write $value into R1
	once_single_step_wbbr $once 0x1BE1D000 $value

	# Write R1 into address
	once_single_step_wbbr $once 0x543F0000 $address
}


proc once_read_gpr {once gpr} {

	# ori gpr ^ 0 -> gpr and wwbr
	set shifted_gpr_s [expr $gpr << 21]
	set shifted_gpr_a [expr $gpr << 16]
	set inst 0x1800D000
	set inst [format 0x%08X [expr $inst | $shifted_gpr_s]]
	set inst [format 0x%08X [expr $inst | $shifted_gpr_a]]

	once_single_step $once $inst

	set value [once_read_wbbr $once]
	return $value
}


proc once_write_gpr {once gpr value} {

	# ori value ^ 0 -> gpr
	set shifted_gpr [expr $gpr << 16]
	set inst 0x1800D000
	set inst [format 0x%08X [expr $inst | $shifted_gpr]]

	once_single_step_wbbr $once $inst $value

}


# Load binary file to SRAM
# If the binary is going to be executed, it should end with 32 bit zeroes
# (this creates a breakpoint)
proc once_load_bin {once address filename} {

	set infile [open $filename r]

	set bytes [read $infile 4]
	while { $bytes ne ""} {
		set ret [binary scan $bytes Iu s]
		if { $ret == 0 } {
			puts "File size is not multiple of 4"
			exit
		}
		set s [format 0x%08X $s]
		puts "Block: $s"

		once_write32 $once $address $s

		set address [expr 0x04 + $address]
		set address [format 0x%08X $address]
		set bytes [read $infile 4]
	}
}


# Run a previously loaded binary on @address
proc once_run {once address} {

	# Read CPUSCR register chain -> [ WBBRL WBBRH MSR PC IR CTL ]
	irscan $once 0x210
	set cpuscr [drscan $once 32 0x00000000 32 0x00000000 32 0x00000000 32 0x00000000 32 0x00000000 32 0x00000000]

	# Save CTL subregister
	set ctl 0x[lindex $cpuscr 5]

	set ctl [expr $ctl & 0xFFFF0000]
	set ctl [expr $ctl | 0x00000002]    ;# FFRA=0 (Don't use wbbr), IRSTAT8=1 (VLE inst)
	set ctl [format 0x%08X $ctl]

	set pc [expr $address - 0x02]
	set pc [format 0x%08X $pc]
	#puts "pc = $pc"

	# Write CPUSCR
	set instruction 0x60000000   ;# nop
	irscan $once 0x010
	drscan $once 32 0x00000000 32 0x00000000 32 0x00000000 32 $pc 32 $instruction 32 $ctl

	# GO command + Leave debug mode
	irscan $once 0x191
	drscan $once 32 0x00000000
}

proc hex_rev {str} {
   set res {}
   set i [string length $str]
   while {$i > 0} {
	append res [string index $str [expr $i - 2] ]
	append res [string index $str [expr $i - 1] ]
	incr i -2
   }
   set res
}

proc once_save_bin {once address len filename} {

	set _ENDIAN big

	set outfile [open $filename "wb"]

	set end [expr $address + $len]

	while { $address < $end} {
		set bytes [once_nexus_read $once $address]

		puts -nonewline $outfile [hex_rev $bytes ]

		set address [expr 0x04 + $address]
	}

	close $outfile
}


proc once_nexus_write {once address value} {
	irscan $once 0x07c
	drscan $once 8 0x13
	drscan $once 32 $address
	drscan $once 8 0x0f
	drscan $once 32 0xD0000000
	drscan $once 8 0x15
	drscan $once 32 $value
}

proc once_nexus_read {once address} {
	irscan $once 0x07c
	drscan $once 8 0x13
	drscan $once 32 $address
	drscan $once 8 0x0f
	drscan $once 32 0x90000000
	drscan $once 8 0x14
	set value [drscan $once 32 0x00000000]

	return $value
}
